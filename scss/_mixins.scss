@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;
  @if $orientation == 'vertical' {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  }
  @else if $orientation == 'horizontal' {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  }
  @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

@mixin scrim($startColor: 'black', $direction: 'to bottom', $ease: 'ease-in-out', $offsetStart: 0, $offsetEnd: 100) {
  // ease out
  $scrimCoordinatesEaseOut: (
          0: 1,
          19: 0.738,
          34: 0.541,
          47: 0.382,
          56.5: 0.278,
          65: 0.194,
          73: 0.126,
          80.2: 0.075,
          86.1: 0.042,
          91: 0.021,
          95.2: 0.008,
          98.2: 0.002,
          100: 0
  );

  // ease in out
  $scrimCoordinatesEaseInOutSine: (
          0: 1,
          9.5: 0.978,
          17.7: 0.925,
          24.7: 0.857,
          31: 0.781,
          36.8: 0.701,
          42.3: 0.62,
          47.6: 0.538,
          52.9: 0.455,
          58.2: 0.373,
          63.7: 0.291,
          69.5: 0.212,
          75.8: 0.138,
          82.9: 0.07,
          91.2: 0.019,
          100: 0
  );

  $hue: hue($startColor);
  $saturation: saturation($startColor);
  $lightness: lightness($startColor);
  $stops: ();
  $scrimCoordinates: $scrimCoordinatesEaseOut;

  @if $ease == 'ease-in-out-sine' {
    $scrimCoordinates: $scrimCoordinatesEaseInOutSine;
  }

  @each $colorStop, $alphaValue in $scrimCoordinates {
    $stop: hsla($hue, $saturation, $lightness, $alphaValue) percentage((($offsetEnd - $offsetStart) * $colorStop/100 + $offsetStart)/100);
    $stops: append($stops, $stop, comma);
  }

  background: linear-gradient(unquote($direction), $stops);

}

@mixin center($position) {
  position: absolute;

  @if $position == 'vertical' {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  } @else if $position == 'horizontal' {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  } @else if $position == 'both' {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
}


@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin border-radii($topleft: null, $topright: null, $bottomright: null, $bottomleft: null) {
  @if $topleft != null and $topleft >= 0 {
    border-top-left-radius: $topleft;
    -webkit-border-top-left-radius: $topleft;
    -moz-border-radius-topleft: $topleft;
  }

  @if $topright != null and $topright >= 0 {
    border-top-right-radius: $topright;
    -webkit-border-top-right-radius: $topright;
    -moz-border-radius-topright: $topright;
  }

  @if $bottomleft != null and $bottomleft >= 0 {
    border-bottom-left-radius: $bottomleft;
    -webkit-border-bottom-left-radius: $bottomleft;
    -moz-border-radius-bottomleft: $bottomleft;
  }

  @if $bottomright != null and $bottomright >= 0 {
    border-bottom-right-radius: $bottomright;
    -webkit-border-bottom-right-radius: $bottomright;
    -moz-border-radius-bottomright: $bottomright;
  }
}

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}

@mixin animation($animation) {
  -webkit-animation: $animation;
  -moz-animation: $animation;
  -o-animation: $animation;
  animation: $animation;
}

@mixin font-size($sizeValue: 1) {
  font-size: ($sizeValue * 16) * 1px;
  font-size: $sizeValue * 1rem;
}
